[{"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/index.js":"1","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/App.js":"2","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/StandAloneScreens/SplashScreen.js":"3","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/MainMenu.js":"4","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/MenuItem.js":"5","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/Options.js":"6","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/HighScores.js":"7","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/TrillionScoreKeeper.js":"8","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/TraditionalScoreKeeper.js":"9","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/GameModeTraditional.js":"10","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/GameMasterClass.js":"11","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/GameModeTrillion.js":"12"},{"size":199,"mtime":1609620846491,"results":"13","hashOfConfig":"14"},{"size":2515,"mtime":1615747151907,"results":"15","hashOfConfig":"14"},{"size":374,"mtime":1613238323401,"results":"16","hashOfConfig":"14"},{"size":1029,"mtime":1613932740533,"results":"17","hashOfConfig":"14"},{"size":430,"mtime":1613519377388,"results":"18","hashOfConfig":"14"},{"size":4036,"mtime":1614991114859,"results":"19","hashOfConfig":"14"},{"size":140,"mtime":1613335207433,"results":"20","hashOfConfig":"14"},{"size":1762,"mtime":1614820588386,"results":"21","hashOfConfig":"14"},{"size":513,"mtime":1614991064353,"results":"22","hashOfConfig":"14"},{"size":3199,"mtime":1615751836553,"results":"23","hashOfConfig":"14"},{"size":12815,"mtime":1615751836553,"results":"24","hashOfConfig":"14"},{"size":2190,"mtime":1615751836652,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1s74el4",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/index.js",[],["54","55"],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/App.js",["56"],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/StandAloneScreens/SplashScreen.js",[],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/MainMenu.js",[],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/MenuItem.js",[],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/Options.js",[],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Menus/HighScores.js",[],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/TrillionScoreKeeper.js",[],"/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/TraditionalScoreKeeper.js",["57"],"import React, { Component } from 'react'\n\nexport default class TraditionalScoreKeeper extends Component {\n    constructor(props) {\n        super(props); \n    }\n    render() {\n        return (\n            <div>\n                <div>Left Player: {this.props.gameStats.leftPaddleScore}</div>\n                <div>Right Player: {this.props.gameStats.rightPaddleScore}</div>\n                {this.props.gameStats.gameOver && <div>The Winner is {this.props.gameStats.winner}</div>}\n            </div>\n        )\n    }\n}\n","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/GameModeTraditional.js",["58","59"],"import React, { Component } from 'react'\nimport GameMasterClass from './GameMasterClass'\nimport TraditionalScoreKeeper from './TraditionalScoreKeeper';\n\n\nexport default class GameModeTraditional extends GameMasterClass {\n    constructor(props) {\n        super(props); \n\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleController); \n        document.addEventListener('keyup', this.handleController); \n        this.gameLoop(); \n    }\n\n    startGame() {\n \n        this.ball.speed = 3; \n        \n        //ball starting angle\n        let leftOrRightVar = Math.floor(Math.random() *2); \n\n        if (leftOrRightVar === 0) {\n            let ballAngle = Math.floor(Math.random() * 91 + 135)\n            this.ball.angle = ballAngle; \n            this.ball.direction = 'left'; \n        } else if (leftOrRightVar === 1) {\n\n            let ballAngle = Math.floor(Math.random() * 46);\n            let upOrDownVar = Math.floor(Math.random() * 2);\n            if (upOrDownVar === 0) {\n                ballAngle = -ballAngle; \n            }\n            this.ball.angle = ballAngle; \n            this.ball.direction = 'right'; \n            // this.getBallFutureLocation(); \n        }\n\n        this.updateBall(); \n        // call getBallFutureLocation if the angle goes right. \n        //  this.getBallFutureLocation(); \n    }\n\n    restartGame() {\n        this.ball = {\n            speed: null,\n            x: 370,\n            y: 320, \n            angle: null,\n            radians: 0,\n            xunits: 0,\n            yunits: 0, \n            size: 10,\n            direction: null,\n            futureLocation: 270 \n        }\n\n        // this.stopGame = false; \n\n        this.ball.passedFirstHit = false; \n        let tempPlayTo = this.props.gameObject.playTo; \n        let playTo = parseInt(tempPlayTo, 10)\n\n        if (this.state.gameStats.leftPaddleScore >= playTo && this.state.gameStats.leftPaddleScore > this.state.gameStats.rightPaddleScore + 1) {\n\n            this.setGameStats('winner', 'left');\n            this.setGameStats('gameOver', true)\n        } else if (this.state.gameStats.rightPaddleScore >= playTo && this.state.gameStats.rightPaddleScore > this.state.gameStats.leftPaddleScore +1) {\n\n            this.setGameStats('winner', 'right');\n            this.setGameStats('gameOver', true)\n        }\n\n        if (!this.state.gameStats.gameOver) {\n            this.startGame(); \n        }\n\n    }\n\n    render() {\n        console.log(this.state); \n        return (\n            <div>\n                <div>testing traditional mode Component </div>\n\n                {/* {this.props.gameObject.gameMode === 'trillion' && <TrillionScoreKeeper gameStats={this.state.gameStats} />} */}\n                <canvas ref={this.canvasRef} width={750} height={600}></canvas>\n                <br/> \n                {this.props.gameObject.gameMode === 'traditional' && <TraditionalScoreKeeper gameStats={this.state.gameStats} />}\n                <button onClick={this.startGame}>START GAME</button>\n                <button onClick={this.backToMenu}>back to menu</button>\n                <button onClick={this.restartGame}>restart game</button>\n            </div>\n        )\n    }\n}\n","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/GameMasterClass.js",["60","61"],"import React, { Component } from 'react'\nimport TrillionScoreKeeper from './TrillionScoreKeeper'\nimport TraditionalScoreKeeper from './TraditionalScoreKeeper';\n\nexport default class GameMasterClass extends Component {\n    constructor(props) {\n        super(props); \n        this.canvasRef = React.createRef();\n\n        this.gameObject = props.gameObject; \n\n        this.stopGame = false;\n\n        this.state = {\n            leftPaddleWinCount: 0,\n            rightPaddleWinCount: 0, \n            gameStats: {\n                serve: false, \n                firstServe: true, \n                leftPaddleScore: 0, \n                rightPaddleScore: 0,\n                gameOver: false,\n                winner: null,\n                totalHitCount: 0 \n            }\n        }\n\n\n\n        this.controller = {\n            up: false, \n            down: false\n        }\n\n        this.borders = {\n           // color: props.gameObject.borderColor,\n            top: {\n                x1: null, \n                x2: null\n            }, \n            bottom: {\n                x1: null, \n                x2: null\n            } \n        }\n\n        this.paddles = {\n            //color: props.gameObject.paddleColor, \n            size: 60, \n            left: {\n                top: 270,\n                movementHistory: [],\n                isMoving: false,\n                movementDirection: null, \n            },\n            right: {\n                top: 270,\n                movementHistory: [],\n                isMoving: false,\n                movementDirection: null, \n                speed: 5\n            }\n        }\n\n        this.ball = {\n            speed: null,\n            x: 370,\n            y: 320, \n            angle: 210,\n            radians: 0,\n            xunits: 0,\n            yunits: 0, \n            size: 10,\n            direction: null,\n            futureLocation: 270,\n            passedFirstHit: false \n        }\n\n\n        this.startGame = this.startGame.bind(this); \n        this.handleController = this.handleController.bind(this);\n        this.updateBall = this.updateBall.bind(this); \n        this.getBallFutureLocation = this.getBallFutureLocation.bind(this); \n        this.update = this.update.bind(this); \n        this.draw = this.draw.bind(this); \n        this.gameLoop = this.gameLoop.bind(this); \n        this.backToMenu = this.backToMenu.bind(this); \n        this.restartGame = this.restartGame.bind(this); \n        this.setGameStats = this.setGameStats.bind(this); \n    }\n\n    setGameStats(key, value) {\n        this.setState(prevState => {\n          let gameStats = { ...prevState.gameStats};\n          gameStats[key] = value; \n          return {gameStats}\n        })\n      }\n\n    updateBall() {\n\n        if (this.ball.passedFirstHit) {\n            if (this.props.gameObject.ballSpeed === 'slow') {\n                this.ball.speed = 3; \n           } else if (this.props.gameObject.ballSpeed === 'medium') {\n                this.ball.speed = 5; \n           } else if (this.props.gameObject.ballSpeed === 'fast') {\n                this.ball.speed = 8; \n           }\n        }\n\n        this.ball.angle = this.ball.angle % 360; \n        this.ball.radians = this.ball.angle * Math.PI / 180; \n        this.ball.xunits = Math.cos(this.ball.radians) * this.ball.speed; \n        this.ball.yunits = Math.sin(this.ball.radians) * this.ball.speed; \n    }\n\n    startGame() {\n \n        this.ball.speed = 3; \n        \n        //ball starting angle\n        let leftOrRightVar = Math.floor(Math.random() *2); \n\n        if (leftOrRightVar === 0) {\n            let ballAngle = Math.floor(Math.random() * 91 + 135)\n            this.ball.angle = ballAngle; \n            this.ball.direction = 'left'; \n        } else if (leftOrRightVar === 1) {\n\n            let ballAngle = Math.floor(Math.random() * 46);\n            let upOrDownVar = Math.floor(Math.random() * 2);\n            if (upOrDownVar === 0) {\n                ballAngle = -ballAngle; \n            }\n            this.ball.angle = ballAngle; \n            this.ball.direction = 'right'; \n            // this.getBallFutureLocation(); \n        }\n\n        this.updateBall(); \n        // call getBallFutureLocation if the angle goes right. \n        //  this.getBallFutureLocation(); \n    }\n\n    handleController(e) {\n        if (e.type === 'keydown' && e.keyCode === 38) {\n            if (this.controller.up === false) {\n                this.paddles.left.movementHistory = []; \n            }\n\n            this.controller.up = true;  \n            this.paddles.left.isMoving = true; \n            this.movementDirection = 'up';\n        } else if (e.type === 'keydown' && e.keyCode === 40) {\n            if (this.controller.down === false) {\n                this.paddles.left.movementHistory = []; \n            }\n\n            this.controller.down = true; \n            this.paddles.left.isMoving = true;\n            this.movementDirection = 'down';  \n        } else if (e.type === 'keyup' && e.keyCode === 38) {\n            this.paddles.left.movementHistory = [];\n            this.controller.up = false; \n            this.paddles.left.isMoving = false; \n        } else if (e.type === 'keyup' && e.keyCode === 40) {\n            this.paddles.left.movementHistory = []; \n            this.controller.down = false; \n            this.paddles.left.isMoving = false; \n        }\n    }\n\n    getBallFutureLocation() {\n\n        let ballClone = {\n            speed: this.ball.speed, \n            x: this.ball.x,\n            y: this.ball.y,\n            angle: this.ball.angle, \n            radians:this.ball.radians,\n            xunits: this.ball.xunits,\n            yunits: this.ball.yunits, \n            size: this.ball.size\n        }\n\n        while (ballClone.x <= 700) {\n\n            ballClone.x += ballClone.xunits; \n            ballClone.y += ballClone.yunits; \n\n            //bounce off top and bottom. \n            if (ballClone.y <= 50 || ballClone.y >= 550) {\n                ballClone.angle = 360 - ballClone.angle; \n                ballClone.angle = ballClone.angle % 360; \n                ballClone.radians = ballClone.angle * Math.PI / 180; \n                ballClone.xunits = Math.cos(ballClone.radians) * ballClone.speed; \n                ballClone.yunits = Math.sin(ballClone.radians) * ballClone.speed; \n            }\n        }\n            \n        this.ball.futureLocation = ballClone.y; \n    }\n  \n    update() { \n        //left paddle mechanics \n        let leftPaddleBottom = this.paddles.left.top + this.paddles.size; \n        let leftMovementStreak = 0; \n\n        if (this.controller.up && this.paddles.left.top >= 50) {\n            this.paddles.left.top -= 5; \n        }\n        if (this.controller.down && leftPaddleBottom <= 550) {\n            this.paddles.left.top += 5; \n        }\n        \n        let leftPaddleHistory = this.paddles.left.movementHistory; \n        leftPaddleHistory.push(this.paddles.left.isMoving); \n        if (leftPaddleHistory.length >= 60) {\n            leftPaddleHistory.shift(); \n        }\n\n        for (let i = 0; i < leftPaddleHistory.length; i++) { \n            let reverseHistory = leftPaddleHistory.reverse(); \n            if (reverseHistory[i] === true) {\n                leftMovementStreak += 1; \n            } else {\n                break; \n            }\n        }\n\n        // right paddle mechanics\n        let rightPaddleBottom = this.paddles.right.top + this.paddles.size; \n        let rightPaddleMiddle = this.paddles.right.top + (this.paddles.size / 2); \n\n        // if (this.ball.futureLocation !== rightPaddleMiddle) {\n        //     let diff = this.ball.futureLocation - rightPaddleMiddle; \n            \n        //     if (Math.abs(diff) < 5) {\n        //         this.paddles.right.top += diff; \n        //     } \n\n        //    if (Math.sign(diff) === 1) {\n        //        this.paddles.right.top += 5\n        //    } else if (Math.sign(diff) === -1) {\n        //        this.paddles.right.top -= 5;\n        //    }\n\n        // }\n\n\n        if (this.ball.y > rightPaddleMiddle && Math.floor(Math.random() * 6) === 2) {\n            this.paddles.right.speed = 5; \n        }  else if (this.ball.y < rightPaddleMiddle && Math.floor(Math.random() * 6) === 2) {\n            this.paddles.right.speed = -5; \n        }\n\n        this.paddles.right.top += this.paddles.right.speed\n\n        //links ball.y to right paddle\n        // this.paddles.right.top = this.ball.y -30; \n\n\n        // ball mechanics\n        let tempBallX = this.ball.x; \n        \n        this.ball.x += this.ball.xunits; \n        this.ball.y += this.ball.yunits; \n    \n        let ballTraveledArr = [];\n\n        if (this.ball.x > tempBallX) {\n            for (let i = tempBallX; i <= this.ball.x; i++) {\n                ballTraveledArr.push(Math.floor(i)); \n            }\n        } else if (tempBallX > this.ball.x) {\n            for (let i = this.ball.x; i <= tempBallX; i++) {\n                ballTraveledArr.push(Math.floor(i)); \n            }\n        }\n\n        // console.log(ballTraveledArr); \n\n        if (ballTraveledArr.includes(50) && this.ball.direction ==='left' && this.ball.y >= this.paddles.left.top && this.ball.y <= leftPaddleBottom) {\n        \n            \n\n            if (leftMovementStreak >= 30 /* && leftMovementStreak < 45 */) {\n                if (this.movementDirection === 'up') {\n                    this.ball.angle = -68; \n                } else if (this.movementDirection ==='down') {\n                    this.ball.angle = 68; \n                }\n            }\n\n            if (leftMovementStreak >= 15 && leftMovementStreak < 30) {\n                if (this.movementDirection === 'up') {\n                    this.ball.angle = -45; \n                } else if (this.movementDirection ==='down') {\n                    this.ball.angle = 45; \n                }\n            }\n\n            if (leftMovementStreak > 0 && leftMovementStreak < 15) {\n                if (this.movementDirection === 'up') {\n                    this.ball.angle = -23; \n                } else if (this.movementDirection ==='down') {\n                    this.ball.angle = 23; \n                }\n            } \n            \n            if (leftMovementStreak === 0) {\n                this.ball.angle = 180 - this.ball.angle;   \n            }\n\n            let newHitCount = this.state.gameStats.totalHitCount + 1; \n            this.setGameStats('totalHitCount', newHitCount); \n\n            // this.setState({ totalHitCount: newHitCount })\n           \n            // this.setState(prevState => {\n            //     let gameStats = { ...prevState.gameStats}; \n            //     gameStats.totalHitCount = newHitCount; \n            //     return {gameStats}\n            // })\n\n            \n       \n            this.ball.passedFirstHit = true; \n            this.updateBall(); \n            this.ball.direction = 'right'; \n            this.getBallFutureLocation(); \n\n        }\n\n        //temp if (keeps ball bouncing even if I'm not playing)\n        // if (this.ball.x <= 25) {\n        //     this.ball.angle = 180 - this.ball.angle;   \n        //     this.updateBall() \n\n        // }\n\n        if (ballTraveledArr.includes(700) && this.ball.direction === 'right' && this.ball.y >= this.paddles.right.top && this.ball.y <= rightPaddleBottom) {\n            this.ball.passedFirstHit = true; \n            this.ball.angle = 180 - this.ball.angle;\n            this.updateBall(); \n            this.ball.direction = 'left'\n        } \n\n        if (this.ball.x <= 0) {\n            let newScore = this.state.gameStats.rightPaddleScore + 1;\n            this.setGameStats('rightPaddleScore', newScore); \n            this.restartGame(); \n        }\n\n        if (this.ball.x >= 750 - this.ball.size) {\n            let newScore = this.state.gameStats.leftPaddleScore + 1; \n            this.setGameStats('leftPaddleScore', newScore); \n            this.restartGame(); \n        }\n\n\n        if (this.ball.y <= 50 || this.ball.y >= 550) {\n            this.ball.angle = 360 - this.ball.angle; \n            this.updateBall(); \n        }\n    }\n\n    draw() {\n        const canvas = this.canvasRef.current; \n        const c = canvas.getContext('2d');\n        let bordersAndPaddleColor = this.props.gameObject.borderAndPaddleColor; \n        let ballColor = this.props.gameObject.ballColor; \n        \n        c.clearRect(0, 0, 750, 750); \n\n        //top border\n        c.beginPath();\n        c.moveTo(50, 50);\n        c.lineTo( 700, 50)\n        c.strokeStyle = bordersAndPaddleColor\n        c.stroke(); \n\n        //bottom border\n        c.beginPath(); \n        c.moveTo(50, 550);\n        c.lineTo(700, 550);        \n        c.strokeStyle = bordersAndPaddleColor; \n        c.stroke(); \n\n        //left paddle \n        c.lineWidth = 10; \n\n        c.beginPath(); \n        c.moveTo(50, this.paddles.left.top);\n        c.lineTo(50, this.paddles.left.top + this.paddles.size);\n        c.strokeStyle = bordersAndPaddleColor;\n        c.stroke(); \n\n        //right paddle\n        c.lineWidth = 10; \n\n\n        c.beginPath(); \n        c.moveTo(700, this.paddles.right.top);\n        c.lineTo(700, this.paddles.right.top + this.paddles.size);\n        c.strokeStyle = bordersAndPaddleColor \n        c.stroke(); \n\n        //ball\n        c.fillStyle = ballColor; \n        c.fillRect(this.ball.x, this.ball.y, this.ball.size, this.ball.size); \n    }\n\n    gameLoop() {\n        if (!this.stopGame) {\n            this.update(); \n            this.draw(); \n            requestAnimationFrame(this.gameLoop); \n        }\n    }\n\n    backToMenu() {\n        this.stopGame = true; \n        this.props.setCurrentScreen('mainMenu'); \n    }\n\n    restartGame() {\n        this.ball = {\n            speed: null,\n            x: 370,\n            y: 320, \n            angle: null,\n            radians: 0,\n            xunits: 0,\n            yunits: 0, \n            size: 10,\n            direction: null,\n            futureLocation: 270 \n        }\n\n        this.stopGame = false; \n\n        this.ball.passedFirstHit = false; \n        let tempPlayTo = this.props.gameObject.playTo; \n        let playTo = parseInt(tempPlayTo, 10)\n\n        if (this.state.gameStats.leftPaddleScore >= playTo && this.state.gameStats.leftPaddleScore > this.state.gameStats.rightPaddleScore + 1) {\n\n            this.setGameStats('winner', 'left');\n            this.setGameStats('gameOver', true)\n        } else if (this.state.gameStats.rightPaddleScore >= playTo && this.state.gameStats.rightPaddleScore > this.state.gameStats.leftPaddleScore +1) {\n\n            this.setGameStats('winner', 'right');\n            this.setGameStats('gameOver', true)\n        }\n\n        if (!this.state.gameStats.gameOver) {\n            this.startGame(); \n        }\n\n    }\n    \n    render() {\n        return (\n            <div></div>\n        )\n    }\n}\n","/Users/jonathanwallace/Desktop/Programming/Projects/REACT/PONG/src/Game/GameModeTrillion.js",["62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":7,"column":8,"nodeType":"70","messageId":"71","endLine":7,"endColumn":23},{"ruleId":"72","severity":1,"message":"73","line":4,"column":5,"nodeType":"74","messageId":"75","endLine":6,"endColumn":6},{"ruleId":"68","severity":1,"message":"76","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":7,"column":5,"nodeType":"74","messageId":"75","endLine":10,"endColumn":6},{"ruleId":"68","severity":1,"message":"77","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":27},{"ruleId":"68","severity":1,"message":"78","line":3,"column":8,"nodeType":"70","messageId":"71","endLine":3,"endColumn":30},{"ruleId":"68","severity":1,"message":"76","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":7,"column":5,"nodeType":"74","messageId":"75","endLine":9,"endColumn":6},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'GameMasterClass' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'TrillionScoreKeeper' is defined but never used.","'TraditionalScoreKeeper' is defined but never used.","no-global-assign","no-unsafe-negation"]